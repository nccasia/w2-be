generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output   = "../src/@generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id               Int               @id @default(autoincrement())
  name             String
  description      String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt
  eventLogs        EventLog[]
  files            File[]
  permissions      Permission[]
  permissionGroups PermissionGroup[]
  projects         Project[]
  resources        Resource[]
  settings         Settings[]
  tasks            Task[]
  taskBoards       TaskBoard[]
  teams            Team[]
  users            User[]
}

model Resource {
  id             Int            @id @default(autoincrement())
  name           String
  description    String
  code           String
  icon           String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now()) @updatedAt
  organizationId Int
  organization   Organization   @relation(fields: [organizationId], references: [id])
  resourceItems  ResourceItem[]
}

model ResourceItem {
  id          Int      @id @default(autoincrement())
  name        String
  code        String
  description String
  icon        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  resourceId  Int
  resource    Resource @relation(fields: [resourceId], references: [id])
}

model File {
  id             Int          @id @default(autoincrement())
  filename       String
  fileType       FileType
  mimetype       String
  encoding       String
  data           String
  cdnUrl         String
  varantName     String?
  variantKey     String?
  variantValue   String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  variantOfId    Int?
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  variantOf      File?        @relation("FileVariants", fields: [variantOfId], references: [id])
  variants       File[]       @relation("FileVariants")
  avatarUsers    User[]
}

model Settings {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  key            String
  organizationId Int
  value          Json         @default("{}")
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model User {
  id               Int                @id @default(autoincrement())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
  email            String             @unique
  password         String?
  firstname        String?
  lastname         String?
  organizationId   Int?
  role             Role
  avatarId         Int?
  googleId         String?
  googleToken      String?
  provider         ProviderEnum       @default(local)
  fullName         String?            @db.VarChar
  branchCode       String?            @db.VarChar
  jobPositionCode  String?            @db.VarChar
  userTypeName     String?            @db.VarChar
  statusName       String?            @db.VarChar
  comments         Comment[]
  taskEvents       EventLog[]
  memberOnProjects MemberOnProjects[]
  memberOnTeams    MemberOnTeams[]
  posts            Post[]
  createdProjects  Project[]          @relation("ProjectCreator")
  managedProjects  Project[]          @relation("ProjectManager")
  repotedProjects  Project[]          @relation("ProjectReporter")
  assignedTasks    Task[]             @relation("TaskAssignee")
  createdTasks     Task[]             @relation("TaskCreator")
  reportedTasks    Task[]             @relation("TaskReporter")
  createdteams     Team[]             @relation("TeamCreator")
  managedteams     Team[]             @relation("TeamManager")
  avatar           File?              @relation(fields: [avatarId], references: [id])
  organization     Organization?      @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  userPermissions  UserPermission[]
  userSettings     UserSetting[]
}

model UserSetting {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  key       String
  value     Json     @default("{}")
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Form {
  id               Int      @id @default(autoincrement())
  name             String
  code             String
  description      String
  schema           Json
  config           Json
  validationConfig Json
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  values           Json?
  tasks            Task[]
}

model Permission {
  id                Int              @id @default(autoincrement())
  name              String
  code              String
  description       String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @default(now()) @updatedAt
  organizationId    Int
  permissionGroupId Int
  organization      Organization     @relation(fields: [organizationId], references: [id])
  permissionGroup   PermissionGroup  @relation(fields: [permissionGroupId], references: [id])
  userPermissions   UserPermission[]
}

model PermissionGroup {
  id             Int          @id @default(autoincrement())
  name           String
  description    String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  organizationId Int
  permissions    Permission[]
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model UserPermission {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  userId       Int
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  published Boolean
  title     String
  content   String?
  authorId  Int?
  author    User?    @relation(fields: [authorId], references: [id])
}

model Project {
  id               Int                @id @default(autoincrement())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
  name             String
  description      String
  code             String
  icon             String
  organizationId   Int
  taskDefinitionId Int
  creatorId        Int
  managerId        Int
  reporterId       Int
  members          MemberOnProjects[]
  creator          User               @relation("ProjectCreator", fields: [creatorId], references: [id])
  manager          User               @relation("ProjectManager", fields: [managerId], references: [id])
  organization     Organization       @relation(fields: [organizationId], references: [id])
  reporter         User               @relation("ProjectReporter", fields: [reporterId], references: [id])
  taskDefinition   TaskDefinition     @relation(fields: [taskDefinitionId], references: [id])
  settings         ProjectSettings[]
  tasks            Task[]
  taskBoards       TaskBoard[]
}

model TaskBoard {
  id               Int                 @id @default(autoincrement())
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @default(now()) @updatedAt
  name             String
  description      String
  code             String
  icon             String
  type             TaskBoardType       @default(Organization)
  viewType         TaskBoardViewType   @default(Todos)
  viewConfig       Json                @default("{}")
  visibility       Visibility          @default(Public)
  organizationId   Int
  projectId        Int?
  taskDefinitionId Int
  organization     Organization        @relation(fields: [organizationId], references: [id])
  project          Project?            @relation(fields: [projectId], references: [id])
  taskDefinition   TaskDefinition      @relation(fields: [taskDefinitionId], references: [id])
  settings         TaskBoardSettings[]
}

model TaskBoardSettings {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  key         String
  value       Json      @default("{}")
  taskBoardId Int
  taskBoard   TaskBoard @relation(fields: [taskBoardId], references: [id])
}

model MemberOnProjects {
  projectId  Int
  userId     Int
  assignedAt DateTime @default(now())
  assignedBy String
  project    Project  @relation(fields: [projectId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@id([projectId, userId])
}

model ProjectSettings {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  key       String
  value     Json     @default("{}")
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id])
}

model Team {
  id             Int             @id @default(autoincrement())
  name           String
  bio            String
  description    String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  creatorId      Int
  managerId      Int
  organizationId Int
  memberOnTeams  MemberOnTeams[]
  tasks          Task[]
  creator        User            @relation("TeamCreator", fields: [creatorId], references: [id])
  manager        User            @relation("TeamManager", fields: [managerId], references: [id])
  organization   Organization    @relation(fields: [organizationId], references: [id])
}

model MemberOnTeams {
  teamId     Int
  userId     Int
  assignedAt DateTime @default(now())
  assignedBy String
  team       Team     @relation(fields: [teamId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@id([teamId, userId])
}

model TaskDefinition {
  id                   Int              @id @default(autoincrement())
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @default(now()) @updatedAt
  title                String
  description          String
  icon                 String
  thumbnail            String
  descriptionTemplate  String?
  titleTemplate        String?
  statusTemplate       String?
  stateTemplate        String?
  notificationTemplate String?
  ctaTemplate          String?
  organizationId       Int
  parentId             Int?
  keyTemplate          String?
  machineConfig        Json?
  projects             Project[]
  taskInstances        Task[]
  taskBoards           TaskBoard[]
  parentTaskDefinition TaskDefinition?  @relation("TaskSubtaskDefinition", fields: [parentId], references: [id])
  subTaskDefinitions   TaskDefinition[] @relation("TaskSubtaskDefinition")

  @@index([parentId])
}

model Task {
  id                   Int             @id @default(autoincrement())
  title                String
  description          String
  dueDate              DateTime?
  priority             TaskPriority    @default(LOW)
  values               Json?
  ctaName              String          @default("")
  stateName            String          @default("")
  statusName           String          @default("")
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @default(now()) @updatedAt
  definitionId         Int?
  assigneeId           Int?
  creatorId            Int
  parentId             Int?
  organizationId       Int?
  teamId               Int?
  config               Json?
  cta                  String          @default("")
  ctaTemplate          String?
  descriptionTemplate  String?
  notificationTemplate String?
  properties           Json?
  state                String          @default("")
  stateTemplate        String?
  stateValues          String          @default("")
  statusTemplate       String?
  titleTemplate        String?
  type                 String          @default("")
  typeName             String          @default("")
  status               String          @default("")
  formConfig           Json?
  key                  String
  isActive             Boolean         @default(false)
  formId               Int?
  projectId            Int?
  reporterId           Int?
  comments             Comment[]
  eventLogs            EventLog[]
  assignee             User?           @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator              User            @relation("TaskCreator", fields: [creatorId], references: [id])
  definition           TaskDefinition? @relation(fields: [definitionId], references: [id])
  form                 Form?           @relation(fields: [formId], references: [id])
  organization         Organization?   @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  parentTask           Task?           @relation("TaskSubtasks", fields: [parentId], references: [id])
  subTasks             Task[]          @relation("TaskSubtasks")
  project              Project?        @relation(fields: [projectId], references: [id])
  reporter             User?           @relation("TaskReporter", fields: [reporterId], references: [id])
  team                 Team?           @relation(fields: [teamId], references: [id])
  Trigger              Trigger[]

  @@index([assigneeId, status])
  @@index([creatorId, status])
  @@index([priority])
  @@index([parentId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  content   String
  creatorId Int
  taskId    Int
  creator   User     @relation(fields: [creatorId], references: [id])
  task      Task     @relation(fields: [taskId], references: [id])
}

model EventLog {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime?     @default(now())
  userId         Int?
  taskId         Int?
  organizationId Int?
  content        String?
  context        Json?
  action         String?
  domain         String?
  intent         String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  task           Task?         @relation(fields: [taskId], references: [id])
  user           User?         @relation(fields: [userId], references: [id])

  @@index([taskId])
  @@index([userId])
}

model Trigger {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  type        TriggerType
  name        String?
  description String?
  key         String
  status      TriggerStatus
  taskId      Int?
  value       Json?
  task        Task?         @relation(fields: [taskId], references: [id])
}

model ActivityDefinition {
  id           Int          @id @default(autoincrement())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now()) @updatedAt
  synchronous  Boolean      @default(false)
  type         ActivityType
  config       Json?
  initialValue Json?
  key          String       @unique
  name         String?
  description  String?

  @@index([key])
}

enum FileType {
  FILE
  VARIANT
}

enum ProviderEnum {
  local
  google
}

enum TaskBoardViewType {
  Todos
  Kanban
  Calendar
  Matrix
}

enum TaskBoardType {
  Organization
  Personal
  Project
  Team
}

enum Visibility {
  Public
  Private
}

enum Role {
  ADMIN
  USER
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TriggerType {
  FORM_TRIGGER
  SYSTEM_TRIGGER
  MANUAL_TRIGGER
  WEBHOOK_TRIGGER
}

enum TriggerStatus {
  NEW
  PROCESSING
  PROCESSED
  FAILED
}

enum ActivityType {
  HTTP_ACTIVITY
  GRAPHQL_ACTIVITY
  SCRIPT_ACTIVITY
  SYSTEM_ACTIVITY
}
