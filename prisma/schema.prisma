datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  // for yarn monorepos
  // provider = "prisma-nestjs-graphql"
  output   = "../src/@generated"
}

model Organization {
  id Int @id @default(autoincrement())

  name        String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  tasks            Task[]
  users            User[]
  teams            Team[]
  settings         Settings[]
  files            File[]
  eventLogs        EventLog[]
  taskDefinitions  TaskDefinition[]
  permissionGroups PermissionGroup[]
  permissions      Permission[]
  resources        Resource[]
  projects         Project[]
  taskBoards       TaskBoard[]
}

model Resource {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  code        String
  icon        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int

  resourceItems ResourceItem[]
}

model ResourceItem {
  id          Int      @id @default(autoincrement())
  name        String
  code        String
  description String
  icon        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId Int
}

enum FileType {
  FILE
  VARIANT
}

model File {
  id       Int      @id @default(autoincrement())
  filename String
  fileType FileType
  mimetype String
  encoding String
  data     String
  cdnUrl   String

  varantName   String?
  variantKey   String?
  variantValue String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  variantOfId Int?
  variantOf   File? @relation("FileVariants", fields: [variantOfId], references: [id]) // Add a relation to the parent file for variants

  variants File[] @relation("FileVariants")

  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])

  avatarUsers User[]
}

model Settings {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  key       String
  value     Json     @default("{}")

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
}

model User {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now()) @updatedAt
  email     String       @unique
  password  String?
  provider  ProviderEnum @default(ProviderEnum.local)
  firstname String?
  lastname  String?

  googleId    String?
  googleToken String?

  avatarId Int?
  avatar   File? @relation(fields: [avatarId], references: [id])

  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])

  managedteams Team[] @relation("TeamManager")
  createdteams Team[] @relation("TeamCreator")

  createdTasks  Task[] @relation("TaskCreator")
  assignedTasks Task[] @relation("TaskAssignee")

  memberOnTeams MemberOnTeams[]
  posts         Post[]
  comments      Comment[]
  taskEvents    EventLog[]
  role          Role

  userPermissions UserPermission[]
  userSettings    UserSetting[]

  memberOnProjects MemberOnProjects[]
  managedProjects  Project[]          @relation("ProjectManager")
  createdProjects  Project[]          @relation("ProjectCreator")
  reportedTasks    Task[]             @relation("TaskReporter")
  repotedProjects  Project[]          @relation("ProjectReporter")
}

enum ProviderEnum {
  local
  google
}

model UserSetting {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  key       String
  value     Json     @default("{}")

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model Form {
  id          Int    @id @default(autoincrement())
  name        String
  code        String
  description String

  schema           Json
  config           Json
  validationConfig Json
  triggerConfig    Json
  serializerConfig Json

  displayTemplate String
  displayConfig   Json

  taskDefinitions TaskDefinition[]
  tasks           Task[]

  values Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String
  code        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int

  permissionGroup   PermissionGroup @relation(fields: [permissionGroupId], references: [id])
  permissionGroupId Int

  userPermissions UserPermission[]
}

model PermissionGroup {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int

  permissions Permission[]
}

model UserPermission {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  userId Int

  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  published Boolean
  title     String
  content   String?
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model Project {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  name        String
  description String
  code        String
  icon        String

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int

  taskDefinition   TaskDefinition @relation(fields: [taskDefinitionId], references: [id])
  taskDefinitionId Int

  tasks Task[]

  creator   User @relation("ProjectCreator", fields: [creatorId], references: [id])
  creatorId Int

  manager   User @relation("ProjectManager", fields: [managerId], references: [id])
  managerId Int

  reporter   User @relation("ProjectReporter", fields: [reporterId], references: [id])
  reporterId Int

  members    MemberOnProjects[]
  taskBoards TaskBoard[]
  settings   ProjectSettings[]
}

enum TaskBoardViewType {
  Todos
  Kanban
  Calendar
  Matrix
}

enum TaskBoardType {
  Organization
  Personal
  Project
  Team
}

enum Visibility {
  Public
  Private
}

model TaskBoard {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  name        String
  description String
  code        String
  icon        String

  type       TaskBoardType     @default(Organization)
  viewType   TaskBoardViewType @default(Todos)
  viewConfig Json              @default("{}")

  visibility Visibility          @default(Public)
  settings   TaskBoardSettings[]

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int

  project   Project? @relation(fields: [projectId], references: [id])
  projectId Int?

  taskDefinition   TaskDefinition @relation(fields: [taskDefinitionId], references: [id])
  taskDefinitionId Int
}

model TaskBoardSettings {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  key       String
  value     Json     @default("{}")

  taskBoard   TaskBoard @relation(fields: [taskBoardId], references: [id])
  taskBoardId Int
}

model MemberOnProjects {
  project   Project @relation(fields: [projectId], references: [id])
  projectId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  assignedAt DateTime @default(now())
  assignedBy String

  @@id([projectId, userId])
}

model ProjectSettings {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  key       String
  value     Json     @default("{}")

  project   Project @relation(fields: [projectId], references: [id])
  projectId Int
}

model Team {
  id          Int    @id @default(autoincrement())
  name        String
  bio         String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  creatorId Int
  creator   User @relation("TeamCreator", fields: [creatorId], references: [id])

  managerId Int
  manager   User @relation("TeamManager", fields: [managerId], references: [id])

  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])

  memberOnTeams MemberOnTeams[]
  tasks         Task[]
}

model MemberOnTeams {
  team   Team @relation(fields: [teamId], references: [id])
  teamId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  assignedAt DateTime @default(now())
  assignedBy String

  @@id([teamId, userId])
}

enum Role {
  ADMIN
  USER
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model TaskDefinition {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  keyTemplate String?

  title       String
  description String

  icon      String
  thumbnail String

  formId Int?
  form   Form? @relation(fields: [formId], references: [id])

  descriptionTemplate  String?
  titleTemplate        String?
  statusTemplate       String?
  stateTemplate        String?
  notificationTemplate String?
  ctaTemplate          String?

  machineConfig      Json?
  contextConfig      Json?
  stateConfig        Json?
  statusConfig       Json?
  notificationConfig Json?
  processConfig      Json?
  triggerConfig      Json?
  ctaConfig          Json?
  config             Json?

  taskInstances Task[]

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int

  parentId             Int?
  parentTaskDefinition TaskDefinition? @relation("TaskSubtaskDefinition", fields: [parentId], references: [id])

  subTaskDefinitions TaskDefinition[] @relation("TaskSubtaskDefinition")

  taskDefinitionActivityDefinitions TaskDefinitionActivityDefinition[]

  projects   Project[]
  taskBoards TaskBoard[]

  @@index([parentId])
}

model TaskDefinitionActivityDefinition {
  id Int @id @default(autoincrement())

  taskDefinitionId Int
  taskDefinition   TaskDefinition @relation(fields: [taskDefinitionId], references: [id])

  activityDefinitionId Int
  activityDefinition   ActivityDefinition @relation(fields: [activityDefinitionId], references: [id])

  config       Json?
  initialValue Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([taskDefinitionId])
  @@index([activityDefinitionId])
}

model Task {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  dueDate     DateTime?
  priority    TaskPriority @default(LOW)
  isActive    Boolean      @default(false)
  key         String

  properties Json?
  values     Json?

  type     String @default("")
  typeName String @default("")

  cta     String @default("")
  ctaName String @default("")

  state     String @default("")
  stateName String @default("")

  status     String @default("")
  statusName String @default("")

  stateValues String @default("")

  descriptionTemplate  String?
  titleTemplate        String?
  statusTemplate       String?
  stateTemplate        String?
  notificationTemplate String?
  ctaTemplate          String?

  machineConfig      Json?
  contextConfig      Json?
  stateConfig        Json?
  statusConfig       Json?
  notificationConfig Json?
  processConfig      Json?
  triggerConfig      Json?
  ctaConfig          Json?
  formConfig         Json?
  config             Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  definitionId Int
  definition   TaskDefinition @relation(fields: [definitionId], references: [id])

  comments  Comment[]
  eventLogs EventLog[]

  formId Int?
  form   Form? @relation(fields: [formId], references: [id])

  projectId Int?
  project   Project? @relation(fields: [projectId], references: [id])

  assigneeId Int?
  assignee   User? @relation("TaskAssignee", fields: [assigneeId], references: [id])

  creatorId Int
  creator   User @relation("TaskCreator", fields: [creatorId], references: [id])

  parentId   Int?
  parentTask Task? @relation("TaskSubtasks", fields: [parentId], references: [id])

  subTasks Task[] @relation("TaskSubtasks")

  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])

  reporterId Int?
  reporter   User? @relation("TaskReporter", fields: [reporterId], references: [id])

  teamId  Int?
  team    Team?     @relation(fields: [teamId], references: [id])
  Trigger Trigger[]

  @@index([assigneeId, status])
  @@index([creatorId, status])
  @@index([priority])
  @@index([parentId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  content   String
  creatorId Int

  creator User @relation(fields: [creatorId], references: [id])

  taskId Int
  task   Task @relation(fields: [taskId], references: [id])
}

model EventLog {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())

  userId Int?
  user   User? @relation(fields: [userId], references: [id])

  taskId Int?
  task   Task? @relation(fields: [taskId], references: [id])

  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])

  context Json?
  action  String?
  intent  String?
  domain  String?

  content String?

  @@index([taskId])
  @@index([userId])
}

enum TriggerType {
  FORM_TRIGGER
  SYSTEM_TRIGGER
  MANUAL_TRIGGER
  WEBHOOK_TRIGGER
}

enum TriggerStatus {
  NEW
  PROCESSING
  PROCESSED
  FAILED
}

model Trigger {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
  type      TriggerType
  status    TriggerStatus

  key   String
  value Json?

  name        String?
  description String?

  taskId Int?
  task   Task? @relation(fields: [taskId], references: [id])
}

enum ActivityType {
  HTTP_ACTIVITY
  GRAPHQL_ACTIVITY
  SCRIPT_ACTIVITY
  SYSTEM_ACTIVITY
}

model ActivityDefinition {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  synchronous Boolean  @default(false)

  type         ActivityType
  config       Json?
  initialValue Json?
  key          String       @unique
  name         String?
  description  String?

  taskDefinitionActivityDefinitions TaskDefinitionActivityDefinition[]

  @@index([key])
}
